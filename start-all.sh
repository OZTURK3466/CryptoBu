#!/bin/bash

echo "üöÄ D√©marrage de la Plateforme Crypto Trading..."

# Couleurs pour les logs
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
PURPLE='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Variables
PROJECT_DIR=$(pwd)
BACKEND_DIR="$PROJECT_DIR/backend"
FRONTEND_DIR="$PROJECT_DIR/frontend"
DISCORD_BOT_DIR="$PROJECT_DIR/discord-bot"

# Fonction pour afficher les logs avec timestamp
log() {
    echo -e "${CYAN}[$(date '+%H:%M:%S')]${NC} $1"
}

# Fonction pour tuer tous les processus
cleanup() {
    echo -e "\n${RED}üõë Arr√™t de tous les services...${NC}"
    
    # Tuer les processus Node.js li√©s au projet
    pkill -f "node.*server.js" 2>/dev/null
    pkill -f "react-scripts start" 2>/dev/null
    pkill -f "node.*bot-simple.js" 2>/dev/null
    pkill -f "nodemon" 2>/dev/null
    
    # Attendre un peu pour que les processus se terminent proprement
    sleep 2
    
    log "${GREEN}‚úÖ Tous les services ont √©t√© arr√™t√©s${NC}"
    exit 0
}

# Intercepter Ctrl+C
trap cleanup SIGINT SIGTERM

# Fonction pour v√©rifier si un port est libre
check_port() {
    local port=$1
    if lsof -i :$port >/dev/null 2>&1; then
        return 1
    else
        return 0
    fi
}

# Fonction pour attendre qu'un port soit libre
wait_for_port_free() {
    local port=$1
    local max_attempts=10
    local attempt=0
    
    while ! check_port $port && [ $attempt -lt $max_attempts ]; do
        log "${YELLOW}‚è≥ Port $port occup√©, attente...${NC}"
        sleep 2
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -eq $max_attempts ]; then
        log "${RED}‚ùå Port $port toujours occup√© apr√®s $max_attempts tentatives${NC}"
        return 1
    fi
    return 0
}

# Nettoyage des anciens processus
log "${PURPLE}üßπ Nettoyage des anciens processus...${NC}"
pkill -f "node.*server.js" 2>/dev/null
pkill -f "react-scripts start" 2>/dev/null
pkill -f "node.*bot-simple.js" 2>/dev/null
pkill -f "nodemon" 2>/dev/null

# Attendre que les ports se lib√®rent
wait_for_port_free 3001
wait_for_port_free 3000
wait_for_port_free 8080

log "${GREEN}‚úÖ Nettoyage termin√©${NC}"

# V√©rifier que les r√©pertoires existent
if [ ! -d "$BACKEND_DIR" ]; then
    log "${RED}‚ùå R√©pertoire backend introuvable: $BACKEND_DIR${NC}"
    exit 1
fi

if [ ! -d "$FRONTEND_DIR" ]; then
    log "${RED}‚ùå R√©pertoire frontend introuvable: $FRONTEND_DIR${NC}"
    exit 1
fi

if [ ! -d "$DISCORD_BOT_DIR" ]; then
    log "${RED}‚ùå R√©pertoire discord-bot introuvable: $DISCORD_BOT_DIR${NC}"
    exit 1
fi

# V√©rifier les fichiers package.json
if [ ! -f "$BACKEND_DIR/package.json" ]; then
    log "${RED}‚ùå package.json manquant dans le backend${NC}"
    exit 1
fi

if [ ! -f "$FRONTEND_DIR/package.json" ]; then
    log "${RED}‚ùå package.json manquant dans le frontend${NC}"
    exit 1
fi

if [ ! -f "$DISCORD_BOT_DIR/package.json" ]; then
    log "${RED}‚ùå package.json manquant dans discord-bot${NC}"
    exit 1
fi

# Cr√©er les r√©pertoires de logs s'ils n'existent pas
mkdir -p "$PROJECT_DIR/logs"

echo -e "\n${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}üöÄ D√âMARRAGE DES SERVICES${NC}"
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"

# 1. D√©marrer le Backend
log "${BLUE}üìä D√©marrage du Backend (Port 3001)...${NC}"
cd "$BACKEND_DIR"

# V√©rifier si le script dev existe, sinon utiliser start
if grep -q '"dev"' package.json; then
    nohup npm run dev > "$PROJECT_DIR/logs/backend.log" 2>&1 &
    BACKEND_PID=$!
    log "${BLUE}üìä Backend d√©marr√© avec npm run dev (PID: $BACKEND_PID)${NC}"
else
    nohup npm start > "$PROJECT_DIR/logs/backend.log" 2>&1 &
    BACKEND_PID=$!
    log "${BLUE}üìä Backend d√©marr√© avec npm start (PID: $BACKEND_PID)${NC}"
fi

# Attendre que le backend d√©marre
sleep 5

# V√©rifier si le backend est d√©marr√©
if kill -0 $BACKEND_PID 2>/dev/null; then
    log "${GREEN}‚úÖ Backend d√©marr√© avec succ√®s${NC}"
else
    log "${RED}‚ùå Erreur lors du d√©marrage du backend${NC}"
    log "${RED}üìã V√©rifiez les logs: tail -f logs/backend.log${NC}"
    exit 1
fi

cd "$PROJECT_DIR"

# 2. D√©marrer le Frontend
log "${GREEN}üåê D√©marrage du Frontend (Port 3000)...${NC}"
cd "$FRONTEND_DIR"

# D√©marrer le frontend sans ouvrir le navigateur
BROWSER=none nohup npm start > "$PROJECT_DIR/logs/frontend.log" 2>&1 &
FRONTEND_PID=$!
log "${GREEN}üåê Frontend d√©marr√© (PID: $FRONTEND_PID)${NC}"

# Attendre que le frontend d√©marre
sleep 8

# V√©rifier si le frontend est d√©marr√©
if kill -0 $FRONTEND_PID 2>/dev/null; then
    log "${GREEN}‚úÖ Frontend d√©marr√© avec succ√®s${NC}"
else
    log "${RED}‚ùå Erreur lors du d√©marrage du frontend${NC}"
    log "${RED}üìã V√©rifiez les logs: tail -f logs/frontend.log${NC}"
fi

cd "$PROJECT_DIR"

# 3. D√©marrer le Bot Discord
log "${YELLOW}ü§ñ D√©marrage du Bot Discord...${NC}"
cd "$DISCORD_BOT_DIR"

# V√©rifier si le script simple existe
if grep -q '"simple"' package.json; then
    nohup npm run simple > "$PROJECT_DIR/logs/discord-bot.log" 2>&1 &
    BOT_PID=$!
    log "${YELLOW}ü§ñ Bot Discord d√©marr√© avec npm run simple (PID: $BOT_PID)${NC}"
else
    nohup npm start > "$PROJECT_DIR/logs/discord-bot.log" 2>&1 &
    BOT_PID=$!
    log "${YELLOW}ü§ñ Bot Discord d√©marr√© avec npm start (PID: $BOT_PID)${NC}"
fi

# Attendre que le bot d√©marre
sleep 3

# V√©rifier si le bot est d√©marr√©
if kill -0 $BOT_PID 2>/dev/null; then
    log "${GREEN}‚úÖ Bot Discord d√©marr√© avec succ√®s${NC}"
else
    log "${YELLOW}‚ö†Ô∏è  Le bot Discord pourrait avoir des probl√®mes${NC}"
    log "${YELLOW}üìã V√©rifiez les logs: tail -f logs/discord-bot.log${NC}"
fi

cd "$PROJECT_DIR"

# Affichage final
echo -e "\n${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}"
echo -e "${CYAN}‚úÖ TOUS LES SERVICES SONT D√âMARR√âS !${NC}"
echo -e "${CYAN}‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê${NC}\n"

echo -e "${BLUE}üìä Backend API:${NC}     http://localhost:3001"
echo -e "${GREEN}üåê Frontend Web:${NC}    http://localhost:3000" 
echo -e "${PURPLE}‚öôÔ∏è  Admin Panel:${NC}     http://localhost:3001/api/admin"
echo -e "${YELLOW}ü§ñ Bot Discord:${NC}     Connect√© (v√©rifiez Discord)"
echo -e "${PURPLE}üîå WebSocket:${NC}       ws://localhost:8080"

echo -e "\n${CYAN}üìã LOGS EN TEMPS R√âEL:${NC}"
echo -e "Backend:     ${BLUE}tail -f logs/backend.log${NC}"
echo -e "Frontend:    ${GREEN}tail -f logs/frontend.log${NC}"
echo -e "Discord Bot: ${YELLOW}tail -f logs/discord-bot.log${NC}"

echo -e "\n${CYAN}üîß COMMANDES UTILES:${NC}"
echo -e "Voir tous les logs: ${PURPLE}tail -f logs/*.log${NC}"
echo -e "V√©rifier les ports: ${PURPLE}lsof -i :3000 -i :3001 -i :8080${NC}"
echo -e "Arr√™ter tout:       ${RED}Ctrl+C${NC}"

echo -e "\n${GREEN}üéâ La plateforme est pr√™te ! Rendez-vous sur http://localhost:3000${NC}"
echo -e "${PURPLE}üîê Panel Admin accessible sur http://localhost:3001/api/admin${NC}"

echo -e "\n${RED}üí° Appuyez sur Ctrl+C pour arr√™ter tous les services${NC}"
echo -e "${CYAN}‚è≥ En attente...${NC}\n"

# Fonction pour v√©rifier p√©riodiquement les services
monitor_services() {
    while true; do
        sleep 30
        
        # V√©rifier le backend
        if ! kill -0 $BACKEND_PID 2>/dev/null; then
            log "${RED}‚ùå Backend s'est arr√™t√© inattenduement${NC}"
        fi
        
        # V√©rifier le frontend
        if ! kill -0 $FRONTEND_PID 2>/dev/null; then
            log "${RED}‚ùå Frontend s'est arr√™t√© inattenduement${NC}"
        fi
        
        # V√©rifier le bot (optionnel car peut planter plus souvent)
        if ! kill -0 $BOT_PID 2>/dev/null; then
            log "${YELLOW}‚ö†Ô∏è  Bot Discord s'est arr√™t√©${NC}"
        fi
    done
}

# D√©marrer le monitoring en arri√®re-plan
monitor_services &
MONITOR_PID=$!

# Attendre ind√©finiment jusqu'√† Ctrl+C
wait